/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.ByteArrayInputStream;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays; 
import org.example.Body;
import com.fasterxml.jackson.databind.util.JSONPObject;
import com.oracle.bmc.ConfigFileReader;
import com.oracle.bmc.aivision.AIServiceVision;
import com.oracle.bmc.aivision.AIServiceVisionClient;
import com.oracle.bmc.aivision.model.AnalyzeImageDetails;
import com.oracle.bmc.aivision.model.ImageClassificationFeature;
import com.oracle.bmc.aivision.model.ObjectStorageImageDetails;
import com.oracle.bmc.aivision.requests.AnalyzeImageRequest;
import com.oracle.bmc.aivision.responses.AnalyzeImageResponse;
import com.oracle.bmc.auth.AuthenticationDetailsProvider;
import com.oracle.bmc.auth.ConfigFileAuthenticationDetailsProvider;
import com.oracle.bmc.objectstorage.ObjectStorage;
import com.oracle.bmc.objectstorage.ObjectStorageClient;
import com.oracle.bmc.objectstorage.requests.PutObjectRequest;
import com.oracle.bmc.objectstorage.responses.PutObjectResponse;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }
    public void getImageFromRequest(String string){
        /**
         * Create a default authentication provider that uses the DEFAULT
         * profile in the configuration file.
         * Refer to <see href="https://docs.cloud.oracle.com/en-us/iaas/Content/API/Concepts/sdkconfig.htm#SDK_and_CLI_Configuration_File>the public documentation</see> on how to prepare a configuration file.
         */
        final ConfigFileReader.ConfigFile configFile = ConfigFileReader.parseDefault();
        final AuthenticationDetailsProvider provider = new ConfigFileAuthenticationDetailsProvider(configFile);

        byte[] decodedBytes = Base64.getDecoder().decode(base64String);
        ObjectStorageClient objectStorageClient = ObjectStorageClient.builder().build(provider);
        PutObjectRequest putObjectRequest = PutObjectRequest.builder()
            .namespaceName("axobsj4fmeyp")
            .bucketName("PolarisBucket")
            .objectName("uploaded_image_name.jpg")
            .putObjectBody(new ByteArrayInputStream(decodedBytes)) // InputStream of the image bytes
            .build();
        PutObjectResponse putObjectResponse = objectStorageClient.putObject(putObjectRequest);
        

        /* Create a service client */
        AIServiceVisionClient client = AIServiceVisionClient.builder().build(provider);

        /* Create a request and dependent object(s). */
	    AnalyzeImageDetails analyzeImageDetails = AnalyzeImageDetails.builder()
		    .features(new ArrayList<>(Arrays.asList(ImageClassificationFeature.builder()
			.maxResults(880)
			.modelId("ocid1.test.oc1..<unique_ID>EXAMPLE-modelId-Value").build())))
		    .image(ObjectStorageImageDetails.builder()
			.namespaceName("EXAMPLE-namespaceName-Value")
			.bucketName("EXAMPLE-bucketName-Value")
			.objectName("EXAMPLE-objectName-Value").build())
		    .compartmentId("ocid1.test.oc1..<unique_ID>EXAMPLE-compartmentId-Value").build();

	    AnalyzeImageRequest analyzeImageRequest = AnalyzeImageRequest.builder()
		    .analyzeImageDetails(analyzeImageDetails)
		    .opcRequestId("H2ILG9J8QXFY8QZRRO4T<unique_ID>").build();

        /* Send request to the Client */
        AnalyzeImageResponse response = client.analyzeImage(analyzeImageRequest);
    }
}